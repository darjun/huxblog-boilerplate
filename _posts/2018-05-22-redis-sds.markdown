---
layout:		post
title:		"Redis源码阅读-字符串"
subtitle: 	"\"Learn from redis\""
date:		2018-05-22 10:48:00
author:		"Darjun"
header-img:	"img/post-bg-2015.jpg"
tags:
    - redis源码阅读
---

## 目录：
+ [1.概述](#概述)
+ [2.实现](#实现)
+ [3.操作](#操作)
    - [3.1.创建](#创建)
    - [3.2.销毁](#销毁)
    - [3.3.查询基本信息](#查询基本信息)
    - [3.4.修改](#修改)
    - [3.5.扩容](#扩容)
    - [3.6.拼接](#拼接)
    - [3.7.拆分](#拆分)
    - [3.8.映射](#映射)
    - [3.9.连接](#连接)
+ [4.总结](#总结)

### <span id="概述">1.概述</span>
字符串是一个无处不在的数据结构，C语言的原生字符串在一些些操作的性能和易用性上都有所欠缺，且非二进制安全。Redis中实现了一个简单易用的、高效的、二进制安全的字符串`sds`。

### <span id="实现">实现</span>
所在文件：`sds.h`和`sds.c`。

`sds`只是`char *`的`typedef`定义而已：
```
typedef char *sds;
```

每个`sds`有个头部`sdshdr`，头部存放字符串长度，空闲空间大小，实际字符串指针。
```
struct sdshdr {
    unsigned int len;
    unsigned int free;
    char buf[];
};
```

`sds`实际指向的是`buf`的地址，而且在每个字符串末尾会自动添加一个`\0`，所以可以用在所有`c str`的场合。需要`sds`的长度等信息时，通过向前偏移找到`sdshdr`提取信息。字符串扩容时会分配超出实际大小的空间，多余空间通过`free`记录。这样可以降低后面字符串的空间分配频次，提升效率。注意：`\0`没有算入`len`和`free`。

![sds结构](/img/in-post/redis-sds/sds-structure.png)

### <span id="操作">3.操作</span>
`sds`会根据需要动态扩容，所以大部分修改`sds`的操作函数的返回值类型都是`sds`。

#### <span id="创建">3.1.创建</span>
可以以下几种方式创建`sds`：
##### 以`const void *`和`size_t`指定一块内存
`sdsnewlen`通过`init`和`initlen`创建一个`sds`。如果`init`为`NULL`，字符串内容以0填充。
```
sds sdsnewlen(const void *init, size_t initlen) {
    struct sdshdr *sh;

    // 如果init不为NULL，通过init内容创建
    // 否则创建长度为initlen的以0填充的字符串
    if (init) {
        // +1为了存放最后的\0
        sh = zmalloc(sizeof(struct sdshdr)+initlen+1);
    } else {
        // zcalloc会将分配的空间用0填充
        sh = zcalloc(sizeof(struct sdshdr)+initlen+1);
    }
    // 空间不足
    if (sh == NULL) return NULL;
    sh->len = initlen;
    sh->free = 0;
    if (initlen && init)
        memcpy(sh->buf, init, initlen);
    // 添加末尾的\0
    sh->buf[initlen] = '\0';
    return (char*)sh->buf;
}
```

##### 以`const char *`类型的参数
`sdsnew`通过`init`创建`sds`，长度通过`strlen`获取。
```
sds sdsnew(const char *init) {
    // 获取长度，转给sdsnewlen处理
    size_t initlen = (init == NULL) ? 0 : strlen(init);
    return sdsnewlen(init, initlen);
}
```

##### 不带参数创建空`sds`
`sdsempty`创建一个空的`sds`字符串。
```
sds sdsempty(void) {
    // 调用sdsnewlen创建
    return sdsnewlen("", 0);
}
```

##### 从已有的`sds`复制
`sdsdup`复制一份`sds`。
```
sds sdsdup(const sds s) {
    // 以s的内容重新创建一个sds
    return sdsnewlen(s, sdslen(s));
}
```

##### 以`long long`类型的参数
`sdsfromlonglong`通过一个`long long`类型的值构造一个`sds`。
```
sds sdsfromlonglong(long long value) {
    char buf[SDS_LLSTR_SIZE];
    // sdsll2str将value转为字符串存在buf中，返回长度
    int len = sdsll2str(buf,value);

    return sdsnewlen(buf, len);
}
```

#### <span id="销毁">3.2.销毁</span>
`sdsfree`释放`sds`分配的空间。不能直接调用`zfree`，因为指针前面还有头部信息。
```
void sdsfree(sds s) {
    if (s == NULL) return;
    // 需要偏移到头部free
    zfree(s-sizeof(struct sdshdr));
}
```

#### <span id="查询基本信息">3.3.查询基本信息</span>
##### 获取字符串长度
调用`sdslen`获取实际长度（因为可能存入二进制`\0`，不能使用`strlen`获取）。
```
static inline size_t sdslen(const sds s) {
    // 向前偏移找到sdshdr
    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));
    // 取出长度
    return sh->len;
}
```

##### 获取空闲空间
调用`sdsavail`获取空闲空间。
```
static inline size_t sdsavail(const sds s) {
    // 向前偏移找到sdshdr
    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));
    // 取出空闲空间
    return sh->free;
}
```

##### 占用内存大小
调用`sdsAllocSize`获取`sds`分配的空间大小，包括头部，字符串长度，字符串末尾的`\0`，空闲空间长度。
```
size_t sdsAllocSize(sds s) {
    struct sdshdr *sh = (void*) (s-sizeof(struct sdshdr));

    return sizeof(*sh)+sh->len+sh->free+1;
}
```

#### <span id="修改">3.4.修改</span>
`sds`提供多种修改字符串修改操作。
##### 更新长度
调用`sdsupdatelen`根据`buf`指向内容更新长度，以`\0`结尾。
```
void sdsupdatelen(sds s) {
    // 向前偏移获取sdshdr
    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));
    // 通过strlen获取长度
    int reallen = strlen(s);
    // 更新长度和空闲大小
    sh->free += (sh->len-reallen);
    sh->len = reallen;
}
```

这个方法主要用在手动修改`sds`内容时，更新`sdshdr`信息。
```
s = sdsnew("foobar");
s[2] = '\0';
sdsupdatelen(s);
printf("%d\n", sdslen(s)); // 输出2
```

上面例子中，如果没有调用`sdsupdatelen`，输出结果将会是6。

##### 清空`sds`
调用`sdsclear`清空`sds`的内容。
```
void sdsclear(sds s) {
    // 向前偏移找到sdshdr
    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));
    // 更新len和free，并将第一个字符设置为'\0'
    sh->free += sh->len;
    sh->len = 0;
    sh->buf[0] = '\0';
}
```

##### 释放空闲空间
`sdsRemoveFreeSpace`释放`sds`中空闲的空间。
```
sds sdsRemoveFreeSpace(sds s) {
    struct sdshdr *sh;

    sh = (void*) (s-(sizeof(struct sdshdr)));
    // +1为了存放末尾的\0
    sh = zrealloc(sh, sizeof(struct sdshdr)+sh->len+1);
    sh->free = 0;
    return sh->buf;
}
```

##### 增加/减少字符串长度
调用`sdsIncrLen`增加或减少字符串长度。
```
void sdsIncrLen(sds s, int incr) {
    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));

    if (incr >= 0)
        // 不能超过空闲空间大小
        assert(sh->free >= (unsigned int)incr);
    else
        // 不能超过现有字符串长度
        assert(sh->len >= (unsigned int)incr);
    sh->len += incr;
    sh->free -= incr;
    // 设置新的字符串末尾的\0
    s[sh->len] = '\0';
}
```

##### 转换为小写
`sdstolower`将`sds`中字符转为小写形式。
```
void sdstolower(sds s) {
    int len = sdslen(s), j;

    for (j = 0; j < len; j++) s[j] = tolower(s[j]);
}
```

##### 转换为大写
`sdstoupper`将`sds`中字符转为大写形式。
```
void sdstoupper(sds s) {
    int len = sdslen(s), j;

    for (j = 0; j < len; j++) s[j] = toupper(s[j]);
}
```

##### 以`const void *`和`size_t`指定的内存覆盖
`sdscpylen`将以`t`和`len`指向的内存copy到`sds`中，覆盖现有内容。
```
sds sdscpylen(sds s, const void *t, size_t len) {
    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));
    size_t totlen = sh->free+sh->len;

    // 空间不够，重新分配
    if (totlen < len) {
        s = sdsMakeRoomFor(s,len-sh->len);
        if (s == NULL) return NULL;
        sh = (void*) (s-(sizeof(struct sdshdr)));
        totlen = sh->free+sh->len;
    }
    // copy内容
    memcpy(s, t, len);
    s[len] = '\0';
    sh->len = len;
    sh->free = totlen -  len;
    return s;
}
```

##### 以`const char *`指定内容覆盖
`sdscpy`将`t`的内容copy到`sds`中，覆盖现有内容。
```
sds sdscpy(sds s, const char *t) {
    return sdscpylen(s, t, strlen(t));
}
```

##### 移除首尾指定字符
`sdstrim`从`sds`左右删除`cset`中指定的字符。
```
sds sdstrim(sds s, const char *cset) {
    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));
    char *start, *end, *sp, *ep;
    size_t len;

    sp = start = s;
    ep = end = s+sdslen(s)-1;
    // 移除左边的字符
    while(sp <= end && strchr(cset, *sp)) sp++;
    // 移除右边的字符
    while(ep > start && strchr(cset, *ep)) ep--;
    len = (sp > ep) ? 0 : ((ep-sp)+1);
    // 将有效字符串移到buf位置
    if (sh->buf != sp) memmove(sh->buf, sp, len);
    sh->buf[len] = '\0';
    sh->free = sh->free+(sh->len-len);
    sh->len = len;
    return s;
}
```

##### 保留指定范围
`sdsrange`只保留`sds`中起始位置`start`，结束位置`end`之间的字符。位置可以为负数，表示从尾部开始计算。
```
void sdsrange(sds s, int start, int end) {
    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));
    size_t newlen, len = sdslen(s);

    if (len == 0) return 0;
    // 位置为负数，+len算出绝对位置
    if (start < 0) {
        start = len+start;
        if (start < 0) start = 0;
    }
    if (end < 0) {
        end = len+end;
        if (end < 0) end = 0;
    }
    newlen = (start > end) ? 0 : (end-start)+1;
    if (newlen != 0) {
        // 位置超出len处理
        if (start >= (signed)len) {
            newlen = 0;
        } else if (end >= (signed)len) {
            end = len - 1;
            newlen = (start > end) ? 0 : (end-start)+1;
        }
    } else {
        start = 0;
    }
    if (start && newlen) memmove(sh->buf, sh->buf+start, newlen);
    sh->buf[newlen] = 0;
    sh->free = sh->free+(sh->len-newlen);
    sh->len = newlen;
}
```

#### <span id="扩容">3.5.扩容</span>
`sds`可以动态扩容。当`sds`空闲空间不足以容纳操作所需时，会调用以下函数扩容：

##### `sdsMakeRoomFor`
分配空间，使`sds`中可以多容纳额外的`addlen`个字符。
```
sds sdsMakeRoomFor(sds s, size_t addlen) {
    struct sdshdr *sh, *newsh;
    size_t free = sdsavail(s);
    size_t len, newlen;

    // 空闲空间足够
    if (free >= addlen) return s;
    len = sdslen(s);
    sh = (void*) (s-(sizeof(struct sdshdr)));
    newlen = (len+addlen);
    // 如果小于预分配最大长度，额外分配newlen长度的空间。否则多分配SDS_MAX_PREALLOC长度空间
    if (newlen < SDS_MAX_PREALLOC)
        newlen *= 2;
    else
        newlen += SDS_MAX_PREALLOC;
    // +1用于存放末尾的\0
    newsh = zrealloc(sh, sizeof(struct sdshdr)+newlen+1);
    if (newsh == NULL) return NULL;

    newsh->free = newlen - len;
    return newsh->buf;
}
```

##### `sdsgrowzero`
增加字符串长度，以0填充增加的部分。
```
sds sdsgrowzero(sds s, size_t len) {
    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));
    size_t totlen, curlen = sh->len;

    // len小于curlen，不做处理
    if (len <= curlen) return s;
    s = sdsMakeRoomFor(s,len-curlen);
    if (s == NULL) return NULL;

    sh = (void*)(s-(sizeof(struct sdshdr)));
    memset(s+curlen,0,(len-curlen+1));
    totlen = sh->len+sh->free;
    sh->len = len;
    sh->free = totlen-sh->len;
    // 因为memset将所有的都设置为0了，不用特地设置sh->buf[sh->len] = '\0'
}
```

#### <span id="拼接">3.6.拼接</span>
##### 以`const void *`和`size_t`指定一块内存
`sdscatlen`将由`t`和`len`指定的内容拼接到现有字符串的后面。
```
sds sdscatlen(sds s, const void *t, size_t len) {
    struct sdshdr *sh;
    size_t curlen = sdslen(s);

    // 分配足够的空间
    s = sdsMakeRoomFor(s,len);
    if (s == NULL) return NULL;
    sh = (void*) (s-(sizeof(struct sdshdr)));
    // 将t内容copy到字符串尾部
    memcpy(s+curlen, t, len);
    // 更新长度
    sh->len = curlen + len;
    sh->free = sh->free-len;
    // 设置\0
    s[curlen+len] = '\0';
    return s;
}
```

##### 以`const char *`类型的参数
`sdscat`将`t`拼接到现有字符串的后面。
```
sds sdscat(sds s, const char *t) {
    return sdscatlen(s, t, strlen(t));
}
```

##### 拼接已有`sds`对象
将已有的一个`sds`拼接到另一个`sds`的后面。
```
sds sdscatsds(sds s, const sds t) {
    return sdscatlen(s, t, sdslen(t));
}
```

##### 以`const char *`和`va_list`指定的可变参数
`sdscatvprintf`将格式`fmt`和`ap`指定的可变参数拼接到`sds`的后面。
```
sds sdscatvprintf(sds s, const char *fmt, va_list ap) {
    va_list cpy;
    char staticbuf[1024], *buf = staticbuf, *t;
    size_t buflen = strlen(fmt) * 2;

    if (buflen > sizeof(staticbuf)) {
        buf = zmalloc(buflen);
        if (buf == NULL) return NULL
    } else {
        buflen = sizeof(staticbuf);
    }

    while(1) {
        // 尝试通过将位置buflen-2设置为\0，然后使用vsnprintf将内容输出到buf中。
        // 如果\0被覆盖，说明大小超出。需要重新分配大写，再次尝试。
        buf[buflen-2] = '\0';
        va_copy(cpy,ap);
        vsnprintf(buf, buflen, fmt, cpy);
        va_end(cpy);
        if (buf[buflen-2] != '\0') {
            if (buf != staticbuf) zfree(buf);
            buflen *= 2;
            buf = zmalloc(buflen);
            if (buf == NULL) return NULL;
            continue;
        }
        break;
    }

    t = sdscat(s, buf);
    if (buf != staticbuf) zfree(buf);
    return t;
}
```

##### 以`const char *`和`...`指定的可变参数
`sdscatprintf`通过格式`fmt`将可变参数拼接到`sds`的后面。
```
sds sdscatprintf(sds s, const char *fmt, ...) {
    va_list ap;
    char *t;
    va_start(ap, fmt);
    t = sdscatvprintf(s,fmt,ap);
    va_end(ap);
    return t;
}
```

##### 以`const char *`和`...`指定的可变参数（redis自己实现的）
`sdscatfmt`与`sdscatprintf`功能类似，但是速度更快，只支持部分格式操作符。
```
%s - C字符串
%S - sds字符串
%i - 有符号整数
%I - 64位有符号整数
%u - 无符号整数
%U - 64位无符号整数
%% - %
```
```
sds sdscatfmt(sds s, char const *fmt, ...) {
    // ...
}
```

#### <span id="拆分">3.7.拆分</span>
`sdssplitlen`以`sep`和`seplen`分隔字符串`s`，根据得到的每个子字符串创建sds数组并返回。
```
sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {
    int elements = 0, slots = 5, start = 0, j;
    sds *tokens;

    if (seplen < 1 || len < 0) return NULL;

    tokens = zmalloc(sizeof(sds)*slots);
    if (tokens == NULL) return NULL;

    if (len == 0) {
        *count = 0;
        return tokens;
    }
    for (j = 0; j < (len-(seplen-1)); j++) {
        // +2为下一个和最后一个分配空间
        if (slots < elements+2) {
            sds *newtokens;

            slots *= 2;
            newtokens = zrealloc(tokens,sizeof(sds)*slots);
            if (newtokens == NULL) goto cleanup;
            tokens = newtokens;
        }
        if ((seplen == 1 && *(s+j) == sep[0]) || (memcmp(s+j,sep,seplen) == 0)) {
            // 构造sds
            tokens[elements] = sdsnewlen(s+start,j-start);
            if (tokens[elements] == NULL) goto cleanup;
            elements++;
            start = j+seplen;
            // 跳过分隔符
            j = j+seplen-1;
        }
    }
    tokens[elements] = sdsnewlen(s+start,len-start);
    if (tokens[elements] == NULL) goto cleanup;
    elements++;
    *count = elements;
    return tokens;

cleanup:
    {
        int i;
        for (i = 0; i < elements; i++) sdsfree(tokens[i]);
        zfree(tokens);
        return NULL;
    }
}
```

`sdssplitlen`返回的`sds`数组需要调用`sdsfreesplitres`释放：
```
void sdsfreesplitres(sds *tokens, int count) {
    if (!tokens) return;
    while(count--)
        sdsfree(tokens[count]);
    zfree(tokens);
}
```

#### <span id="连接">3.8.连接</span>
`sdsjoin`将字符串数组拼接成以`sep`分隔的一个`sds`。
```
sds sdsjoin(char **argv, int argc, char *sep) {
    sds join = sdsempty();
    int j ;

    for (j = 0; j < argc; j++) {
        // 拼接字符串
        join = sdscat(join, argv[j]);
        // 如果不是最后一个，拼接分隔符
        if (j != argc-1) join = sdscat(join,sep);
    }
    return join;
}
```

#### <span id="映射">3.9.映射</span>
`sdsmapchars`将`sds`在`from`中的字符转为`to`中的对应字符。
```
sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {
    size_t j, i, l = sdslen(s);

    for (j = 0; j < l; j++) {
        for (i = 0; i < setlen; i++) {
            if (s[j] == from[i]) {
                s[j] = to[i];
                break;
            }
        }
    }
    return s;
}
```

#### <span id="比较">3.10.比较</span>
`sdscmp`使用`memcmp`比较两个`sds`内容。
```
int sdscmp(const sds s1, const sds s2) {
    size_t l1, l2, minlen;
    int cmp;

    // 如果s1>s2，返回整数
    // 如果s1<s2，返回负数
    // 如果s1==s2，返回0
    l1 = sdslen(s1);
    l2 = sdslen(s2);
    minlen = (l1 < l2) ? l1 : l2;
    cmp = memcmp(s1,s2,minlen);
    if (cmp == 0) return l1-l2;
    return cmp;
}
```

### <span id="总结">4.总结</span>
原生的C语言字符串有这样或那样的问题，例如获取长度性能不高，二进制不安全等，所以很多第三方库都是自己实现字符串结构。